import datetime
import requests
import json
import streamlit as st
import re

from file_utils import write_agent_file, sanitize_text

def make_api_request(url, data, headers):
    try:
        response = requests.post(url, data=json.dumps(data), headers=headers)
        print(f"Debug: API request sent: {json.dumps(data)}")
        print(f"Debug: API response received: {response.text}")
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"Error: API request failed with status code {response.status_code}")
            return None
    except requests.exceptions.RequestException as e:
        st.error(f"Error: {str(e)}")
        return None

def rephrase_prompt(user_request):
    url = "https://j.gravelle.us/APIs/Groq/groqApiRephrasePrompt.php"
    data = {"user_request": user_request}
    headers = {"Content-Type": "application/json"}
    response_data = make_api_request(url, data, headers)
    if response_data:
        return response_data.get("rephrased", "")
    return ""

def get_agents_from_text(text):
    url = "https://j.gravelle.us/APIs/Groq/groqApiGetAgentsFromPrompt.php"
    data = {"user_request": text}
    headers = {"Content-Type": "application/json"}
    response_data = make_api_request(url, data, headers)
    if response_data:
        for agent in response_data:
            expert_name = agent["expert_name"]
            description = agent["description"]
            skills = agent.get("skills", [])
            tools = agent.get("tools", [])
            write_agent_file(expert_name, description, skills, tools)
        return response_data
    return []



def get_workflow_from_agents(agents):
    current_timestamp = datetime.datetime.now().isoformat()

    workflow = {
        "name": "AutoGroq Workflow",
        "description": "Workflow auto-generated by AutoGroq.",
        "sender": {
            "type": "userproxy",
            "config": {
                "name": "userproxy",
                "llm_config": False,
                "human_input_mode": "NEVER",
                "max_consecutive_auto_reply": 5,
                "system_message": "You are a helpful assistant.",
                "is_termination_msg": None,
                "code_execution_config": {
                    "work_dir": None,
                    "use_docker": False
                },
                "default_auto_reply": "",
                "description": None
            },
            "timestamp": current_timestamp,
            "user_id": "default",
            "skills": None
        },
        "receiver": {
            "type": "groupchat",
            "config": {
                "name": "group_chat_manager",
                "llm_config": {
                    "config_list": [
                        {
                            "model": "gpt-4-1106-preview"
                        }
                    ],
                    "temperature": 0.1,
                    "cache_seed": 42,
                    "timeout": 600,
                    "max_tokens": None,
                    "extra_body": None
                },
                "human_input_mode": "NEVER",
                "max_consecutive_auto_reply": 10,
                "system_message": "Group chat manager",
                "is_termination_msg": None,
                "code_execution_config": None,
                "default_auto_reply": "",
                "description": None
            },
            "groupchat_config": {
                "agents": [],
                "admin_name": "Admin",
                "messages": [],
                "max_round": 10,
                "speaker_selection_method": "auto",
                "allow_repeat_speaker": True
            },
            "timestamp": current_timestamp,
            "user_id": "default",
            "skills": None
        },
        "type": "groupchat",
        "user_id": "default",
        "timestamp": current_timestamp,
        "summary_method": "last"
    }

    for index, agent in enumerate(agents):
        expert_name = agent["expert_name"]
        description = agent["description"]
        formatted_expert_name = sanitize_text(expert_name).lower().replace(' ', '_')
        sanitized_description = sanitize_text(description)

        system_message = f"You are a helpful assistant that can act as {expert_name} who {sanitized_description}."
        
        if index == 0:
            other_agent_names = [sanitize_text(a['expert_name']).lower().replace(' ', '_') for a in agents[1:]]
            system_message += f" You are the primary cordinator who will receive suggestions or advice from all the other agents ({', '.join(other_agent_names)}). You must ensure that the final response integrates the suggestions from other agents or team members. YOUR FINAL RESPONSE MUST OFFER THE COMPLETE RESOLUTION TO THE USER'S REQUEST. When the user's request has been satisfied and all perspectives are integrated, you can respond with TERMINATE."
        
        agent_config = {
            "type": "assistant",
            "config": {
                "name": formatted_expert_name,
                "llm_config": {
                    "config_list": [
                        {
                            "model": "gpt-4-1106-preview"
                        }
                    ],
                    "temperature": 0.1,
                    "cache_seed": 42,
                    "timeout": 600,
                    "max_tokens": None,
                    "extra_body": None
                },
                "human_input_mode": "NEVER",
                "max_consecutive_auto_reply": 8,
                "system_message": system_message,
                "is_termination_msg": None,
                "code_execution_config": None,
                "default_auto_reply": "",
                "description": None
            },
            "timestamp": current_timestamp,
            "user_id": "default",
            "skills": None  # Set skills to null only in the workflow JSON
        }
        workflow["receiver"]["groupchat_config"]["agents"].append(agent_config)

    return workflow


def send_request_to_groq_api(expert_name, request):
    url = "https://j.gravelle.us/APIs/Groq/groqAPI.php"
    data = {
        "model": st.session_state.model,
        "temperature": 0.5,
        "max_tokens": st.session_state.max_tokens,
        "top_p": 1,
        "stop": "TERMINATE",
        "messages": [
            {
                "role": "system",
                "content": "You are a chatbot capable of anything and everything."
            },
            {
                "role": "user",
                "content": request
            }
        ]
    }
    headers = {"Content-Type": "application/json"}
    response_data = make_api_request(url, data, headers)
    if response_data:
        message_content = response_data["choices"][0]["message"]["content"]
        return message_content
    return ""


def extract_code_from_response(response):
    code_pattern = r"```(.*?)```"
    code_blocks = re.findall(code_pattern, response, re.DOTALL)

    html_pattern = r"<html.*?>.*?</html>"
    html_blocks = re.findall(html_pattern, response, re.DOTALL | re.IGNORECASE)

    js_pattern = r"<script.*?>.*?</script>"
    js_blocks = re.findall(js_pattern, response, re.DOTALL | re.IGNORECASE)

    css_pattern = r"<style.*?>.*?</style>"
    css_blocks = re.findall(css_pattern, response, re.DOTALL | re.IGNORECASE)

    all_code_blocks = code_blocks + html_blocks + js_blocks + css_blocks
    unique_code_blocks = list(set(all_code_blocks))

    return "\n\n".join(unique_code_blocks)